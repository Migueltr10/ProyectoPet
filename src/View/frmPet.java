/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package View;

import Classes.*;
import Controller.*;
import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.CellStyle;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Aprendiz
 */
public class frmPet extends javax.swing.JFrame {

    FondoPanel fondo = new FondoPanel();
    ctlPet ctlpet;
    ctlDoctor ctldoctor;
    ctlHospital ctlhospital;
    
    LinkedList<clsPet>dogObjectList = new LinkedList<>();
    LinkedList<clsPet>catObjectList = new LinkedList<>();
    LinkedList<clsBuscarDoctor>docObjectList = new LinkedList<>();
    
    LinkedList<clsHospital>hospitalObjectList = new LinkedList<>();
    
    /**
     * Creates new form frmPet
     */
    public frmPet() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.ctlpet = new ctlPet();
        this.ctldoctor = new ctlDoctor();
        
        this.ctlhospital = new ctlHospital();
        
        this.dogObjectList = ctlpet.ListPet("Perro");
        this.catObjectList = ctlpet.ListPet("Gato");
        this.docObjectList = ctldoctor.ListDoctor();
        
        this.hospitalObjectList = ctlhospital.ListHospital();
        this.FillList();
        this.FillListCat();
        
        this.tabla();
        this.tablaCat();
        this.tablaHospital();
        this.tablaHosp();
        this.tablaDoctor();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane6 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jp1 = new javax.swing.JTabbedPane();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaHosp2 = new javax.swing.JTable();
        jLabel37 = new javax.swing.JLabel();
        btnCrearHosp = new javax.swing.JButton();
        btnEliminarHosp = new javax.swing.JButton();
        btnBuscarHosp = new javax.swing.JButton();
        btnEditarHosp = new javax.swing.JButton();
        txtIdHosp = new javax.swing.JTextField();
        txtNumHosp = new javax.swing.JTextField();
        txtNomHosp = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        petListCat = new javax.swing.JList();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        petListDog = new javax.swing.JList();
        btnExportar = new javax.swing.JButton();
        btnExportarCat = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtCodeCat = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtBornYearCat = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtNameCat = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtColorCat = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cbHealthStatusCat = new javax.swing.JComboBox();
        cbBreedCat = new javax.swing.JComboBox();
        btnBuscarCat = new javax.swing.JButton();
        btnEditarCat = new javax.swing.JButton();
        btnEliminarCat = new javax.swing.JButton();
        txtPetIdCat = new javax.swing.JTextField();
        txtCatId = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        btnCrearCat = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tablaCat = new javax.swing.JTable();
        jLabel26 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtCodeDog = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtBornYearDog = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtNameDog = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtColorDog = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cbHealthStatusDog = new javax.swing.JComboBox();
        cbBreedDog = new javax.swing.JComboBox();
        chbPedigree = new javax.swing.JCheckBox();
        btnCrearDog = new javax.swing.JButton();
        btnBuscarDog = new javax.swing.JButton();
        btnEditarDog = new javax.swing.JButton();
        btnEliminarDog = new javax.swing.JButton();
        txtPetId = new javax.swing.JTextField();
        txtDogId = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaDog2 = new javax.swing.JTable();
        jLabel25 = new javax.swing.JLabel();
        jPannel15 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jpReporteEstadoSalud = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        txtNameDoctor = new javax.swing.JTextField();
        txtAddressDoctor = new javax.swing.JTextField();
        txtNitDoctor = new javax.swing.JTextField();
        txtPhoneDoctor = new javax.swing.JTextField();
        btnCrearDoctor = new javax.swing.JButton();
        btnBuscarDoctor = new javax.swing.JButton();
        btnEditarDoctor = new javax.swing.JButton();
        btnEliminarDoctor = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tablaHospital = new javax.swing.JTable();
        jLabel29 = new javax.swing.JLabel();
        txtNumHab = new javax.swing.JTextField();
        txtNomSala = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        TablaDoctor = new javax.swing.JTable();
        jLabel30 = new javax.swing.JLabel();
        btnExportarDoctor = new javax.swing.JButton();
        txtIDHosp = new javax.swing.JTextField();
        txtIdDoctor = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        jp1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel15.setBackground(new java.awt.Color(255, 255, 255));

        jPanel16.setBackground(new java.awt.Color(0, 153, 153));

        tablaHosp2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tablaHosp2);

        jLabel37.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel37.setText("Hospital Manager");

        btnCrearHosp.setText("Crear");
        btnCrearHosp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearHospActionPerformed(evt);
            }
        });

        btnEliminarHosp.setText("Eliminar");
        btnEliminarHosp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarHospActionPerformed(evt);
            }
        });

        btnBuscarHosp.setText("Buscar");
        btnBuscarHosp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarHospActionPerformed(evt);
            }
        });

        btnEditarHosp.setText("Editar");
        btnEditarHosp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarHospActionPerformed(evt);
            }
        });

        txtIdHosp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdHospActionPerformed(evt);
            }
        });

        jLabel38.setText("Nombre");

        jLabel39.setText("Id");

        jLabel40.setText("Numero");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGap(306, 306, 306)
                        .addComponent(jLabel37))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel16Layout.createSequentialGroup()
                                .addComponent(btnCrearHosp)
                                .addGap(62, 62, 62)
                                .addComponent(btnBuscarHosp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnEditarHosp)
                                .addGap(45, 45, 45)
                                .addComponent(btnEliminarHosp))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel39)
                            .addComponent(jLabel40))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNumHosp, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                            .addComponent(txtIdHosp))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                        .addComponent(jLabel38)
                        .addGap(18, 18, 18)
                        .addComponent(txtNomHosp, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel37)
                .addGap(24, 24, 24)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIdHosp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomHosp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38)
                    .addComponent(jLabel39))
                .addGap(43, 43, 43)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNumHosp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40))
                .addGap(58, 58, 58)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCrearHosp)
                    .addComponent(btnEliminarHosp)
                    .addComponent(btnBuscarHosp)
                    .addComponent(btnEditarHosp))
                .addGap(54, 54, 54))
        );

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jp1.addTab("Hospital Manager", jPanel15);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel8.setBackground(new java.awt.Color(0, 153, 153));
        jPanel8.setPreferredSize(new java.awt.Dimension(868, 401));

        petListCat.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 5));
        petListCat.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jScrollPane1.setViewportView(petListCat);

        jLabel14.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 36)); // NOI18N
        jLabel14.setText("Lista de Gatos");

        jLabel15.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 36)); // NOI18N
        jLabel15.setText("Lista de Perros");

        petListDog.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 5));
        petListDog.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jScrollPane2.setViewportView(petListDog);

        btnExportar.setText("Exportar Perro");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        btnExportarCat.setText("Exportar Gato");
        btnExportarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarCatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel14)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(92, 92, 92))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGap(163, 163, 163)
                .addComponent(btnExportarCat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExportar)
                .addGap(172, 172, 172))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(61, 61, 61)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExportar)
                    .addComponent(btnExportarCat))
                .addContainerGap(142, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE))
        );

        jp1.addTab("Pet List", jPanel2);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jPanel6.setBackground(new java.awt.Color(0, 153, 153));

        jPanel7.setBackground(new java.awt.Color(0, 153, 153));
        jPanel7.setPreferredSize(new java.awt.Dimension(868, 401));

        jLabel8.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel8.setText("Code");

        txtCodeCat.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel9.setText("Born Year");

        txtBornYearCat.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        txtBornYearCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBornYearCatActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel10.setText("Health Status");

        txtNameCat.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        txtNameCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameCatActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel11.setText("Name");

        jLabel12.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel12.setText("Color");

        txtColorCat.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel13.setText("Breed");

        cbHealthStatusCat.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        cbHealthStatusCat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Enfermo", "Sano", "Recuperado", "Muerto" }));

        cbBreedCat.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        cbBreedCat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Persa", "Vengala", "Naime Coon", "Esfinge" }));
        cbBreedCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBreedCatActionPerformed(evt);
            }
        });

        btnBuscarCat.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        btnBuscarCat.setText("Buscar");
        btnBuscarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarCatActionPerformed(evt);
            }
        });

        btnEditarCat.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        btnEditarCat.setText("Editar");
        btnEditarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarCatActionPerformed(evt);
            }
        });

        btnEliminarCat.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        btnEliminarCat.setText("Eliminar");
        btnEliminarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarCatActionPerformed(evt);
            }
        });

        txtPetIdCat.setEditable(false);

        txtCatId.setEditable(false);

        jLabel27.setText("catId");

        jLabel28.setText("petId");

        btnCrearCat.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        btnCrearCat.setText("Crear");
        btnCrearCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearCatActionPerformed(evt);
            }
        });

        tablaCat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Codigo", "Estado", "Año Nacimiento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(tablaCat);

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel26.setText("Tabla Cat");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel11)
                                .addGap(25, 25, 25))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel28)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtPetIdCat, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addGap(18, 18, 18)
                                                .addComponent(cbHealthStatusCat, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel26)))
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbBreedCat, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtColorCat, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                            .addComponent(txtCatId, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(17, 17, 17)))
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCodeCat, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBornYearCat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(139, 139, 139)
                                .addComponent(txtNameCat, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel12)
                                .addGap(315, 315, 315)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(64, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(177, 177, 177))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(btnCrearCat, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(btnBuscarCat, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(btnEditarCat, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(btnEliminarCat, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtCodeCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNameCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(23, 23, 23)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtBornYearCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(txtColorCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel13)
                    .addComponent(cbHealthStatusCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbBreedCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(txtCatId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPetIdCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28))
                .addGap(32, 32, 32)
                .addComponent(jLabel26)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscarCat)
                    .addComponent(btnEditarCat)
                    .addComponent(btnEliminarCat)
                    .addComponent(btnCrearCat))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jp1.addTab("Cat Manager", jPanel4);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(0, 153, 153));

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel4.setText("Code");

        txtCodeDog.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        txtCodeDog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodeDogActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel1.setText("Born Year");

        txtBornYearDog.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        txtBornYearDog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBornYearDogActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel5.setText("Health Status");

        txtNameDog.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        txtNameDog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameDogActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel2.setText("Name");

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel3.setText("Color");

        txtColorDog.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel6.setText("Breed");

        cbHealthStatusDog.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        cbHealthStatusDog.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Enfermo", "Sano", "Recuperado", "Muerto" }));

        cbBreedDog.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        cbBreedDog.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Criollo", "PitBull", "Pastor Aleman", "Pincher" }));
        cbBreedDog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBreedDogActionPerformed(evt);
            }
        });

        chbPedigree.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        chbPedigree.setText("Pedigree");
        chbPedigree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbPedigreeActionPerformed(evt);
            }
        });

        btnCrearDog.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        btnCrearDog.setText("Crear");
        btnCrearDog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearDogActionPerformed(evt);
            }
        });

        btnBuscarDog.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        btnBuscarDog.setText("Buscar");
        btnBuscarDog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarDogActionPerformed(evt);
            }
        });

        btnEditarDog.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        btnEditarDog.setText("Editar");
        btnEditarDog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarDogActionPerformed(evt);
            }
        });

        btnEliminarDog.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        btnEliminarDog.setText("Eliminar");
        btnEliminarDog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarDogActionPerformed(evt);
            }
        });

        txtPetId.setEditable(false);
        txtPetId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPetIdActionPerformed(evt);
            }
        });

        txtDogId.setEditable(false);
        txtDogId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDogIdActionPerformed(evt);
            }
        });

        tablaDog2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Codigo", "Estado", "Año Nacimiento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaDog2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaDog2MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tablaDog2);

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel25.setText("Tabla Dog");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(402, 402, 402)
                .addComponent(jLabel6)
                .addGap(32, 32, 32)
                .addComponent(cbBreedDog, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chbPedigree)
                .addContainerGap(35, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(18, 18, 18)
                            .addComponent(cbHealthStatusDog, 0, 272, Short.MAX_VALUE))
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18))
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(17, 17, 17)))
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtBornYearDog, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                                .addComponent(txtCodeDog))))
                    .addComponent(txtPetId, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btnCrearDog, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(btnBuscarDog, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNameDog)
                            .addComponent(txtColorDog, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDogId, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(btnEditarDog, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(btnEliminarDog, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(195, 195, 195))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(343, 343, 343))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtCodeDog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNameDog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(23, 23, 23)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtBornYearDog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtColorDog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(cbHealthStatusDog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbBreedDog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbPedigree))
                .addGap(22, 22, 22)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDogId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPetId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscarDog)
                    .addComponent(btnCrearDog)
                    .addComponent(btnEditarDog)
                    .addComponent(btnEliminarDog))
                .addGap(56, 56, 56))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jp1.addTab("Dog Manager", jPanel3);

        jPannel15.setBackground(new java.awt.Color(255, 255, 255));

        jPanel14.setBackground(new java.awt.Color(0, 153, 153));

        jpReporteEstadoSalud.setBackground(new java.awt.Color(0, 153, 153));

        javax.swing.GroupLayout jpReporteEstadoSaludLayout = new javax.swing.GroupLayout(jpReporteEstadoSalud);
        jpReporteEstadoSalud.setLayout(jpReporteEstadoSaludLayout);
        jpReporteEstadoSaludLayout.setHorizontalGroup(
            jpReporteEstadoSaludLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jpReporteEstadoSaludLayout.setVerticalGroup(
            jpReporteEstadoSaludLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 433, Short.MAX_VALUE)
        );

        jButton1.setText("Abrir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Abrir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Abrir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Abrir");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel33.setText("Reporte Salud Perro");

        jLabel34.setText("Reporte Salud Gato");

        jLabel35.setText("Reporte de Razas Perro");

        jLabel36.setText("Reporte deRazas Gato");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpReporteEstadoSalud, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel33)
                    .addComponent(jLabel34))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 231, Short.MAX_VALUE)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel35, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel36, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addGap(180, 180, 180))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jLabel33)
                    .addComponent(jLabel35))
                .addGap(38, 38, 38)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jLabel34)
                    .addComponent(jLabel36))
                .addGap(37, 37, 37)
                .addComponent(jpReporteEstadoSalud, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPannel15Layout = new javax.swing.GroupLayout(jPannel15);
        jPannel15.setLayout(jPannel15Layout);
        jPannel15Layout.setHorizontalGroup(
            jPannel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPannel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPannel15Layout.setVerticalGroup(
            jPannel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPannel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jp1.addTab("Reporte Estado de Salud", jPannel15);

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        jPanel11.setBackground(new java.awt.Color(0, 153, 153));

        jLabel21.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel21.setText("Address");

        jLabel22.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel22.setText("Nit");

        jLabel23.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel23.setText("Phone");

        txtNameDoctor.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        txtNameDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameDoctorActionPerformed(evt);
            }
        });

        txtAddressDoctor.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        txtAddressDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddressDoctorActionPerformed(evt);
            }
        });

        txtNitDoctor.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N

        txtPhoneDoctor.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N

        btnCrearDoctor.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        btnCrearDoctor.setText("Crear");
        btnCrearDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearDoctorActionPerformed(evt);
            }
        });

        btnBuscarDoctor.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        btnBuscarDoctor.setText("Buscar");
        btnBuscarDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarDoctorActionPerformed(evt);
            }
        });

        btnEditarDoctor.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        btnEditarDoctor.setText("Editar");
        btnEditarDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarDoctorActionPerformed(evt);
            }
        });

        btnEliminarDoctor.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        btnEliminarDoctor.setText("Eliminar");
        btnEliminarDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarDoctorActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel20.setText("Name");

        tablaHospital.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Numero", "Habitacion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaHospital.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaHospitalMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(tablaHospital);

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel29.setText("Doctors");

        txtNumHab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumHabActionPerformed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel31.setText("Num. Habit.");

        jLabel32.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel32.setText("Nom. Sala");

        TablaDoctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Address", "Telefono"
            }
        ));
        jScrollPane10.setViewportView(TablaDoctor);

        jLabel30.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel30.setText("Lista de Hospitales");

        btnExportarDoctor.setText("Exportar");
        btnExportarDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarDoctorActionPerformed(evt);
            }
        });

        txtIDHosp.setEditable(false);

        txtIdDoctor.setEditable(false);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addGap(18, 18, 18)
                                .addComponent(txtNameDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel21)
                                    .addComponent(jLabel31))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNumHab)
                                    .addComponent(txtAddressDoctor, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(btnCrearDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                        .addComponent(btnBuscarDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)))
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(btnEditarDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78)
                        .addComponent(btnEliminarDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(133, 133, 133))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel23)
                            .addComponent(jLabel22)
                            .addComponent(jLabel32))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNomSala)
                            .addComponent(txtNitDoctor, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                            .addComponent(txtPhoneDoctor))
                        .addGap(38, 38, 38))))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jLabel30)
                .addGap(18, 18, 18)
                .addComponent(txtIDHosp, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel29)
                .addGap(28, 28, 28)
                .addComponent(txtIdDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(156, 156, 156))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(373, 373, 373)
                .addComponent(btnExportarDoctor)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(txtNameDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNitDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addGap(44, 44, 44)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAddressDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(txtPhoneDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addGap(32, 32, 32)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNumHab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomSala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31)
                    .addComponent(jLabel32))
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel29)
                            .addComponent(jLabel30)
                            .addComponent(txtIDHosp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIdDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(31, 31, 31)
                .addComponent(btnExportarDoctor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCrearDoctor)
                    .addComponent(btnBuscarDoctor)
                    .addComponent(btnEditarDoctor)
                    .addComponent(btnEliminarDoctor))
                .addGap(41, 41, 41))
        );

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jp1.addTab("Doctor Manager", jPanel10);

        jLabel7.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 36)); // NOI18N
        jLabel7.setText("Pet Manager");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(332, 332, 332)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jp1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jp1)
                .addGap(41, 41, 41))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNumHabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumHabActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumHabActionPerformed

    private void tablaHospitalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaHospitalMouseClicked
        // TODO add your handling code here:
        int seleccion = tablaHospital.rowAtPoint(evt.getPoint());

        txtNumHab.setText(String.valueOf(tablaHospital.getValueAt(seleccion, 1)));
        txtNomSala.setText(String.valueOf(tablaHospital.getValueAt(seleccion, 2)));
    }//GEN-LAST:event_tablaHospitalMouseClicked

    private void btnEliminarDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarDoctorActionPerformed
       String nit = txtNitDoctor.getText();
        if (!nit.equals("")){
            String name = txtNameDoctor.getText();
            String address = txtAddressDoctor.getText();
            String phone = txtPhoneDoctor.getText();
            String numHab = txtNumHab.getText();
            String nomHab = txtNomSala.getText();
            int Id = Integer.parseInt(txtIDHosp.getText());
            int IdDoctor = Integer.parseInt(txtIdDoctor.getText());
            
            try {
                
                clsBuscarDoctor doctor = new clsBuscarDoctor(Id,nomHab, numHab, IdDoctor, name, address, phone, nit);
                Boolean elimino = ctldoctor.DeleteDoctor(doctor);
                if (elimino) {
                    JOptionPane.showMessageDialog(this, "Codigo Eliminado");
                    
                    this.clearDoctorFields();
                    this.docObjectList = ctldoctor.ListDoctor();

                } else {
                    JOptionPane.showMessageDialog(this, "Error actualizando el registro");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a eliminar");

            }
        }else{
            JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a eliminar");

        }
    }//GEN-LAST:event_btnEliminarDoctorActionPerformed

    private void btnEditarDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarDoctorActionPerformed
        // TODO add your handling code here:

        String nit = txtNitDoctor.getText();
        if (!nit.equals("")){
            String name = txtNameDoctor.getText();
            String address = txtAddressDoctor.getText();
            String phone = txtPhoneDoctor.getText();
            String numHab = txtNumHab.getText();
            String nomHab = txtNomSala.getText();
            int Id = Integer.parseInt(txtIDHosp.getText());
            int IdDoctor = Integer.parseInt(txtIdDoctor.getText());
            
            try {

                clsBuscarDoctor doctor = new clsBuscarDoctor(Id,nomHab, numHab, IdDoctor, name, address, phone, nit);
                Boolean edito = ctldoctor.EditDoctor(doctor);
                if (edito) {
                    JOptionPane.showMessageDialog(this, "Codigo editado");
                    this.clearDoctorFields();
                    this.docObjectList = ctldoctor.ListDoctor();

                } else {
                    JOptionPane.showMessageDialog(this, "Error actualizando el registro");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a editar 1");

            }
        }else{
            JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a editar");

        }
        /*boolean edito;
        String nit = txtNitDoctor.getText();
        clsDoctor doctor = (clsDoctor) ctldoctor.BusquedaDoctor(nit);
        edito = ctldoctor.EditDoctor(doctor);

        if(!edito){
            JOptionPane.showMessageDialog(this, "Registro Editado");

            this.FillListDoctor();
        }*/
    }//GEN-LAST:event_btnEditarDoctorActionPerformed

    private void btnBuscarDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarDoctorActionPerformed
        // TODO add your handling code here:
        String nit = txtNitDoctor.getText();
        clsBuscarDoctor doctor = (clsBuscarDoctor) ctldoctor.BusquedaDoctor(nit);
        if (doctor == null){
            JOptionPane.showMessageDialog(this, "Codigo invalido, no existe");
        }else{
            txtIDHosp.setText(doctor.getIdhosp()+"");
            txtNameDoctor.setText(doctor.getNombredoc());
            txtAddressDoctor.setText(doctor.getAddress());
            txtIdDoctor.setText(doctor.getIddoctor()+"");
            txtPhoneDoctor.setText(doctor.getPhone());
            txtNumHab.setText(doctor.getNumhosp());
            txtNomSala.setText(doctor.getNomhops());

        }
    }//GEN-LAST:event_btnBuscarDoctorActionPerformed

    private void btnCrearDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearDoctorActionPerformed
        // TODO add your handling code here:
        try{
            String nit = txtNitDoctor.getText();
            String name = txtNameDoctor.getText();
            String address = txtAddressDoctor.getText ();
            String phone = txtPhoneDoctor.getText();

            boolean crear;
            // hacemos las respectivas validaciones
            if (nit.equals("") || name.equals("") || address.equals("") || phone.equals("")) {
                JOptionPane.showMessageDialog(this, "Faltan Datos por llenar");
            } else {
                int seleccionar = tablaHospital.getSelectedRow();
                int id_hospital = Integer.parseInt(String.valueOf(tablaHospital.getValueAt(seleccionar, 0)));

                clsDoctor doctor = new clsDoctor( name, nit, address, phone,id_hospital);
                crear = ctldoctor.CreateDoctor((clsDoctor)doctor);
                if(crear){
                    JOptionPane.showMessageDialog(this, "Datos Guardados");
                    //this.doctorObjectList = ctldoctor.ListDoctor();
                    this.clearDoctorFields();

                }else{
                    JOptionPane.showMessageDialog(this, "Error al Guardar");

                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Al Guardar");
        }
    }//GEN-LAST:event_btnCrearDoctorActionPerformed

    private void txtAddressDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressDoctorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddressDoctorActionPerformed

    private void txtNameDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameDoctorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameDoctorActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        this.RefrescarReporteEstadoSaludCat();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.RefrescarReporteRazaCat();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.RefrescarReporteRaza();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.RefrescarReporteEstadoSalud();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tablaDog2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaDog2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaDog2MouseClicked

    private void txtDogIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDogIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDogIdActionPerformed

    private void txtPetIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPetIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPetIdActionPerformed

    private void btnEliminarDogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarDogActionPerformed
        // TODO add your handling code here:
        String code = txtCodeDog.getText();
        if (!code.equals("")){
            String name = txtNameDog.getText();
            String color = txtColorDog.getText();

            int bornYear = Integer.parseInt(txtBornYearDog.getText());
            String Breed = cbBreedDog.getSelectedItem().toString();
            String heathStatus = cbHealthStatusDog.getSelectedItem().toString();
            boolean pedigree = chbPedigree.isSelected();
            try {
                int petId = Integer.parseInt(txtPetId.getText());
                int dogId = Integer.parseInt(txtDogId.getText());
                clsDog dog = new clsDog(dogId, pedigree, Breed, petId, name, code, bornYear, color, heathStatus);
                Boolean elimino = ctlpet.DeletePet(dog);
                if (elimino) {
                    JOptionPane.showMessageDialog(this, "Codigo Eliminado");
                    this.clearDogFields();
                    this.dogObjectList = ctlpet.ListPet("Perro");
                    this.FillList();

                } else {
                    JOptionPane.showMessageDialog(this, "Error actualizando el registro");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a eliminar");

            }
        }else{
            JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a eliminar");

        }
    }//GEN-LAST:event_btnEliminarDogActionPerformed

    private void btnEditarDogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarDogActionPerformed
        // TODO add your handling code here:
        String code = txtCodeDog.getText();
        if (!code.equals("")){
            String name = txtNameDog.getText();
            String color = txtColorDog.getText();

            int bornYear = Integer.parseInt(txtBornYearDog.getText());
            String Breed = cbBreedDog.getSelectedItem().toString();
            String heathStatus = cbHealthStatusDog.getSelectedItem().toString();
            boolean pedigree = chbPedigree.isSelected();
            try {
                int petId = Integer.parseInt(txtPetId.getText());
                int dogId = Integer.parseInt(txtDogId.getText());
                clsDog dog = new clsDog(dogId, pedigree, Breed, petId, name, code, bornYear, color, heathStatus);
                Boolean edito = ctlpet.EditPet(dog);
                if (edito) {
                    JOptionPane.showMessageDialog(this, "Codigo editado");
                    this.clearDogFields();
                    this.dogObjectList = ctlpet.ListPet("Perro");
                    this.FillList();

                } else {
                    JOptionPane.showMessageDialog(this, "Error actualizando el registro");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a editar");

            }
        }else{
            JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a editar");

        }
    }//GEN-LAST:event_btnEditarDogActionPerformed

    private void btnBuscarDogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarDogActionPerformed
        // TODO add your handling code here:

        String code = txtCodeDog.getText();
        clsDog dog = (clsDog) ctlpet.BusquedaPet(code, "Perro");
        if (dog == null){
            JOptionPane.showMessageDialog(this, "Codigo invalido, el perro no existe");
        }else{
            txtPetId.setText(dog.getPetId()+"");
            txtDogId.setText(dog.getDogId()+"");
            txtNameDog.setText(dog.getName());
            txtColorDog.setText(dog.getColor());
            txtBornYearDog.setText(dog.getBorn_year()+"");
            cbHealthStatusDog.setSelectedItem(dog.getHealth_status());
            cbBreedDog.setSelectedItem(dog.getBreed());
            chbPedigree.setSelected(dog.isPedigree());

            this.dogObjectList = ctlpet.ListPet("Perro");
            this.FillList();
        }
    }//GEN-LAST:event_btnBuscarDogActionPerformed

    private void btnCrearDogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearDogActionPerformed
        // TODO add your handling code here:

        try{
            String code = txtCodeDog.getText();
            String name = txtNameDog.getText();
            String color = txtColorDog.getText();

            int bornYear = Integer.parseInt(txtBornYearDog.getText());
            String Breed = cbBreedDog.getSelectedItem().toString();
            String heathStatus = cbHealthStatusDog.getSelectedItem().toString();
            boolean pedigree = chbPedigree.isSelected();
            boolean create;
            // hacemos las respectivas validaciones
            if (code.equals("") || name.equals("") || color.equals("")) {
                JOptionPane.showMessageDialog(this, "Faltan Datos por llenar");
            } else {
                clsDog dog = new clsDog(0,pedigree, Breed, 0,name, code, bornYear, color, heathStatus);
                create=ctlpet.CreatePet((clsDog)dog);
                if(create){
                    JOptionPane.showMessageDialog(this, "Datos Guardados");
                    this.clearDogFields();
                    this.dogObjectList = ctlpet.ListPet("Perro");
                    this.FillList();
                    this.tabla();
                }else{
                    JOptionPane.showMessageDialog(this, "Error al Guardar");
                    this.clearDogFields();
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Año invalido");
        }
    }//GEN-LAST:event_btnCrearDogActionPerformed

    private void chbPedigreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbPedigreeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chbPedigreeActionPerformed

    private void cbBreedDogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBreedDogActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbBreedDogActionPerformed

    private void txtNameDogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameDogActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameDogActionPerformed

    private void txtBornYearDogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBornYearDogActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBornYearDogActionPerformed

    private void txtCodeDogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodeDogActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodeDogActionPerformed

    private void btnCrearCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearCatActionPerformed
        // TODO add your handling code here:
        try{
            String code = txtCodeCat.getText();
            String name = txtNameCat.getText();
            String color = txtColorCat.getText();

            int bornYear = Integer.parseInt(txtBornYearCat.getText());
            String Breed = cbBreedCat.getSelectedItem().toString();
            String heathStatus = cbHealthStatusCat.getSelectedItem().toString();

            boolean create;
            // hacemos las respectivas validaciones
            if (code.equals("") || name.equals("") || color.equals("")) {
                JOptionPane.showMessageDialog(this, "Faltan Datos por llenar");
            } else {
                clsCat cat = new clsCat(0, Breed, 0, name, code, bornYear, color, heathStatus);
                create = ctlpet.CreatePet((clsCat)cat);
                if(create){
                    JOptionPane.showMessageDialog(this, "Datos Guardados");
                    this.clearCatFields();
                    this.catObjectList = ctlpet.ListPet("Gato");
                    this.FillListCat();
                    this.tablaCat();
                }else{
                    JOptionPane.showMessageDialog(this, "Error al Guardar");
                }
                this.clearCatFields();
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error Año invalido");
        }
    }//GEN-LAST:event_btnCrearCatActionPerformed

    private void btnEliminarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarCatActionPerformed
        // TODO add your handling code here:
        String code = txtCodeCat.getText();
        if (!code.equals("")){
            String name = txtNameCat.getText();
            String color = txtColorCat.getText();

            int bornYear = Integer.parseInt(txtBornYearCat.getText());
            String Breed = cbBreedCat.getSelectedItem().toString();
            String heathStatus = cbHealthStatusCat.getSelectedItem().toString();

            try {
                int petId = Integer.parseInt(txtPetIdCat.getText());
                int catId = Integer.parseInt(txtCatId.getText());
                clsCat cat = new clsCat(catId, Breed, petId, name, code, bornYear, color, heathStatus);
                Boolean elimino = ctlpet.DeletePet(cat);
                if (elimino) {
                    JOptionPane.showMessageDialog(this, "Codigo Eliminado");
                    this.clearCatFields();
                    this.catObjectList = ctlpet.ListPet("Gato");
                    this.FillListCat();
                    this.tablaCat();
                } else {
                    JOptionPane.showMessageDialog(this, "Error actualizando el registro");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a eliminar");

            }
        }else{
            JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a eliminar");

        }
    }//GEN-LAST:event_btnEliminarCatActionPerformed

    private void btnEditarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarCatActionPerformed
        // TODO add your handling code here:
        String code = txtCodeCat.getText();
        if (!code.equals("")){
            String name = txtNameCat.getText();
            String color = txtColorCat.getText();

            int bornYear = Integer.parseInt(txtBornYearCat.getText());
            String Breed = cbBreedCat.getSelectedItem().toString();
            String heathStatus = cbHealthStatusCat.getSelectedItem().toString();

            try {
                int petId = Integer.parseInt(txtPetIdCat.getText());
                int catId = Integer.parseInt(txtCatId.getText());
                clsCat cat = new clsCat(catId, Breed, petId, name, code, bornYear, color, heathStatus);
                Boolean edito = ctlpet.EditPet(cat);
                if (edito) {
                    JOptionPane.showMessageDialog(this, "Codigo editado");
                    this.clearCatFields();
                    this.catObjectList = ctlpet.ListPet("Gato");
                    this.FillList();
                    this.tablaCat();
                } else {
                    JOptionPane.showMessageDialog(this, "Error actualizando el registro");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a editar");

            }
        }else{
            JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a editar");

        }
    }//GEN-LAST:event_btnEditarCatActionPerformed

    private void btnBuscarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarCatActionPerformed
        // TODO add your handling code here:

        String code = txtCodeCat.getText();
        clsCat cat = (clsCat) ctlpet.BusquedaPet(code, "Gato");
        if (cat == null){
            JOptionPane.showMessageDialog(this, "Codigo invalido, el perro no existe");
        }else{
            txtPetIdCat.setText(cat.getPetId()+"");
            txtCatId.setText(cat.getCatId()+"");
            txtNameCat.setText(cat.getName());
            txtColorCat.setText(cat.getColor());
            txtBornYearCat.setText(cat.getBorn_year()+"");
            cbHealthStatusCat.setSelectedItem(cat.getHealth_status());
            cbBreedCat.setSelectedItem(cat.getBreed());

            this.catObjectList = ctlpet.ListPet("Gato");
            this.FillListCat();
        }
    }//GEN-LAST:event_btnBuscarCatActionPerformed

    private void cbBreedCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBreedCatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbBreedCatActionPerformed

    private void txtNameCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameCatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameCatActionPerformed

    private void txtBornYearCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBornYearCatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBornYearCatActionPerformed

    private void btnExportarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarCatActionPerformed
        // TODO add your handling code here:
        HSSFWorkbook book = new HSSFWorkbook();
        HSSFSheet sheet = book.createSheet();
        book.setSheetName(0, "Gato");

        String[] headers = new String[]{
            "Codigo",
            "Nombre",
            "Color",
            "Estado de salud"
        };
        CellStyle headerCellStyle = book.createCellStyle();
        HSSFFont fuente = book.createFont();
        fuente.setBold(true);
        headerCellStyle.setFont(fuente);

        HSSFRow headersRow = sheet.createRow(0);

        for (int i = 0; i < headers.length; i++) {
            String header = headers[i];
            HSSFCell celda = headersRow.createCell(i);
            celda.setCellStyle(headerCellStyle);
            celda.setCellValue(header);
        }
        for (int i = 0; i < catObjectList.size(); i++) {
            HSSFRow row = sheet.createRow(i + 1);
            String code = catObjectList.get(i).getCode();
            String nombre = catObjectList.get(i).getName();
            String color = catObjectList.get(i).getColor();
            String estadosalud = catObjectList.get(i).getHealth_status();

            row.createCell(0).setCellValue(code);
            row.createCell(1).setCellValue(nombre);
            row.createCell(2).setCellValue(color);
            row.createCell(3).setCellValue(estadosalud);
        }

        try {
            FileOutputStream archivo = new FileOutputStream("Reportecat.xls");
            book.write(archivo);
            archivo.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(frmPet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(frmPet.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnExportarCatActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        // TODO add your handling code here:

        HSSFWorkbook book = new HSSFWorkbook();
        HSSFSheet sheet = book.createSheet();
        book.setSheetName(0, "Perro");

        String[] headers = new String[]{
            "Codigo",
            "Nombre",
            "Color",
            "Estado de salud",
            "Pedigree"
        };
        CellStyle headerCellStyle = book.createCellStyle();
        HSSFFont fuente = book.createFont();
        fuente.setBold(true);
        headerCellStyle.setFont(fuente);

        HSSFRow headersRow = sheet.createRow(0);

        for (int i = 0; i < headers.length; i++) {
            String header = headers[i];
            HSSFCell celda = headersRow.createCell(i);
            celda.setCellStyle(headerCellStyle);
            celda.setCellValue(header);
        }
        for (int i = 0; i < dogObjectList.size(); i++) {
            HSSFRow row = sheet.createRow(i + 1);
            String code = dogObjectList.get(i).getCode();
            String nombre = dogObjectList.get(i).getName();
            String color = dogObjectList.get(i).getColor();
            String estadosalud = dogObjectList.get(i).getHealth_status();
            boolean pedigree = ((clsDog) dogObjectList.get(i)).isPedigree();
            String PedigreeString = pedigree ? "SI" : "NO";
            row.createCell(0).setCellValue(code);
            row.createCell(1).setCellValue(nombre);
            row.createCell(2).setCellValue(color);
            row.createCell(3).setCellValue(estadosalud);
            row.createCell(4).setCellValue(PedigreeString);
        }

        try {
            FileOutputStream archivo = new FileOutputStream("Reportedog.xls");
            book.write(archivo);
            archivo.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(frmPet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(frmPet.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    private void txtIdHospActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdHospActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdHospActionPerformed

    private void btnEditarHospActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarHospActionPerformed
        // TODO add your handling code here:
        String numero = txtNumHosp.getText();
        if (!numero.equals("")){
            int Id = Integer.parseInt(txtIdHosp.getText());
            String nombre = txtNomHosp.getText();

            try {

                clsHospital hosp = new clsHospital(Id, numero, nombre);
                Boolean edito = ctlhospital.EditHospital(hosp);
                if (edito) {
                    JOptionPane.showMessageDialog(this, "Codigo editado");
                    this.clearHospFields();

                    this.FillList();

                } else {
                    JOptionPane.showMessageDialog(this, "Error actualizando el registro");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a editar");

            }
        }else{
            JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a editar");

        }
    }//GEN-LAST:event_btnEditarHospActionPerformed

    private void btnBuscarHospActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarHospActionPerformed
        // TODO add your handling code here:
        String numero = txtNumHosp.getText();
        clsHospital hosp = (clsHospital) ctlhospital.BusquedaHosp(numero);
        if (hosp == null){
            JOptionPane.showMessageDialog(this, "Codigo invalido, no existe");
        }else{
            txtIdHosp.setText(hosp.getId_hospital()+"");
            txtNomHosp.setText(hosp.getNombre());
            txtNumHosp.setText(hosp.getNumero());
        }
    }//GEN-LAST:event_btnBuscarHospActionPerformed

    private void btnEliminarHospActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarHospActionPerformed
        // TODO add your handling code here:
        String numero = txtNumHosp.getText();
        if (!numero.equals("")){

            String nombre = txtNomHosp.getText();
            int Id = Integer.parseInt(txtIdHosp.getText());

            try {

                clsHospital hosp = new clsHospital(Id, numero, nombre);
                Boolean elimino = ctlhospital.DeleteHospital(hosp);
                if (elimino) {
                    JOptionPane.showMessageDialog(this, "Codigo Eliminado");
                    this.clearHospFields();
                    
                    this.FillList();
                    this.tablaHosp();
                } else {
                    JOptionPane.showMessageDialog(this, "Error actualizando el registro");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a eliminar");

            }
        }else{
            JOptionPane.showMessageDialog(this, "Debe buscar primero el registro a eliminar");

        }
    }//GEN-LAST:event_btnEliminarHospActionPerformed

    private void btnCrearHospActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearHospActionPerformed
        // TODO add your handling code here:
        try{
            int nit = Integer.parseInt(txtIdHosp.getText());
            String nombre = txtNomHosp.getText();
            String numero = txtNumHosp.getText();
            boolean crear;

            if(nombre.equals("")||numero.equals("")){
                JOptionPane.showMessageDialog(this, "Faltan Campos por Llenar.");
            }else{
                clsHospital hosp = new clsHospital(0, nombre, numero);
                crear = ctlhospital.CreateHospital((clsHospital)hosp);

                if(crear){
                    JOptionPane.showMessageDialog(this, "Datos Guardados.");
                }else{
                    JOptionPane.showMessageDialog(this, "Error al Guardar.");
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error al Llenar el Formulario.");
        }
    }//GEN-LAST:event_btnCrearHospActionPerformed

    private void btnExportarDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarDoctorActionPerformed
        // TODO add your handling code here:
        HSSFWorkbook book = new HSSFWorkbook();
        HSSFSheet sheet = book.createSheet();
        book.setSheetName(0, "DoctorHospital");

        String[] headers = new String[]{
            
            "Habitacion",
            "Numero",
            "Nit",
            "Nombre",
            "Address",
            "Telefono"
        };
        CellStyle headerCellStyle = book.createCellStyle();
        HSSFFont fuente = book.createFont();
        fuente.setBold(true);
        headerCellStyle.setFont(fuente);

        HSSFRow headersRow = sheet.createRow(0);

        for (int i = 0; i < headers.length; i++) {
            String header = headers[i];
            HSSFCell celda = headersRow.createCell(i);
            celda.setCellStyle(headerCellStyle);
            celda.setCellValue(header);
        }
        for (int i = 0; i < docObjectList.size(); i++) {
            HSSFRow row = sheet.createRow(i + 1);
            
            String Habitacion = docObjectList.get(i).getNomhops();
            String Numero = docObjectList.get(i).getNumhosp();
            String Nit = docObjectList.get(i).getDocumento();
            String Nombre = docObjectList.get(i).getNombredoc();
            String Address = docObjectList.get(i).getAddress();
            String Telefono = docObjectList.get(i).getPhone();
            
            
            row.createCell(0).setCellValue(Habitacion);
            row.createCell(1).setCellValue(Numero);
            row.createCell(2).setCellValue(Nit);
            row.createCell(3).setCellValue(Nombre);
            row.createCell(4).setCellValue(Address);
            row.createCell(5).setCellValue(Telefono);
        }

        try {
            FileOutputStream archivo = new FileOutputStream("ReporteDoctorHosp.xls");
            book.write(archivo);
            archivo.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(frmPet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(frmPet.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnExportarDoctorActionPerformed

    
    private void RefrescarReporteEstadoSalud(){
     LinkedList<clsReporteEstadoSalud> reporte = ctlpet.ListPetReporteSalud();
     
     DefaultPieDataset dataset = new DefaultPieDataset();
     for(clsReporteEstadoSalud record : reporte){
         dataset.setValue(record.getEstadosalud(), record.getContadordeestados());
         
         JFreeChart chart = ChartFactory.createPieChart("Clasificacion Mascotas por Estado", dataset, true, true, true);
         ChartPanel panel = new ChartPanel(chart);
         panel.setMouseWheelEnabled(true);
         jpReporteEstadoSalud.setLayout(new java.awt.BorderLayout());
         jpReporteEstadoSalud.add(panel, BorderLayout.CENTER);
         
         jpReporteEstadoSalud.validate();
     }
}
    
    private void RefrescarReporteEstadoSaludCat(){
     LinkedList<clsReporteEstadoSalud> reporte = ctlpet.ListPetReporteSalud();
     
     DefaultPieDataset dataset = new DefaultPieDataset();
     for(clsReporteEstadoSalud record : reporte){
         dataset.setValue(record.getEstadosalud(), record.getContadordeestados());
         
         JFreeChart chart = ChartFactory.createPieChart("Clasificacion Mascotas por Estado", dataset, true, true, true);
         ChartPanel panel = new ChartPanel(chart);
         panel.setMouseWheelEnabled(true);
         jpReporteEstadoSalud.setLayout(new java.awt.BorderLayout());
         jpReporteEstadoSalud.add(panel, BorderLayout.CENTER);
         
         jpReporteEstadoSalud.validate();
     }
}
     
    private void tablaHospital(){
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new Object[]{"Id","Numero","Habitacion"});
        for(clsHospital hospital : hospitalObjectList){
        modelo.addRow(new Object[]{hospital.getId_hospital(),hospital.getNumero(),hospital.getNombre()});
        
        }
        tablaHospital.setModel(modelo);
        this.hospitalObjectList = ctlhospital.ListHospital();
    
    }
    
    private void tablaHosp(){
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new Object[]{"Id","Numero","Habitacion"});
        for(clsHospital hospital : hospitalObjectList){
        modelo.addRow(new Object[]{hospital.getId_hospital(),hospital.getNumero(),hospital.getNombre()});
        
        }
        tablaHosp2.setModel(modelo);
        this.hospitalObjectList = ctlhospital.ListHospital();
    
    }
    
    private void RefrescarReporteRaza(){
     LinkedList<clsReporteRaza> reporte = ctlpet.ListPetRaza();
     
     DefaultPieDataset dataset = new DefaultPieDataset();
     for(clsReporteRaza record : reporte){
         dataset.setValue(record.getRazas(), record.getContadorrazas());
         
         JFreeChart chart = ChartFactory.createPieChart("Clasificacion Mascotas por Razas", dataset, true, true, true);
         ChartPanel panel = new ChartPanel(chart);
         panel.setMouseWheelEnabled(true);
         jpReporteEstadoSalud.setLayout(new java.awt.BorderLayout());
         jpReporteEstadoSalud.add(panel, BorderLayout.CENTER);
         
         jpReporteEstadoSalud.validate();
    }
    }
    
     private void RefrescarReporteRazaCat(){
     LinkedList<clsReporteRaza> reporte = ctlpet.ListPetRazaCat();
     
     DefaultPieDataset dataset = new DefaultPieDataset();
     for(clsReporteRaza record : reporte){
         dataset.setValue(record.getRazas(), record.getContadorrazas());
         
         JFreeChart chart = ChartFactory.createPieChart("Clasificacion Mascotas por Razas", dataset, true, true, true);
         ChartPanel panel = new ChartPanel(chart);
         panel.setMouseWheelEnabled(true);
         jpReporteEstadoSalud.setLayout(new java.awt.BorderLayout());
         jpReporteEstadoSalud.add(panel, BorderLayout.CENTER);
         
         jpReporteEstadoSalud.validate();
    }
    }
    
    private void tabla(){
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new Object[]{"Nombre","Codigo","Estado","Año Nacimiento"});
        for(clsPet dog : dogObjectList){
        modelo.addRow(new Object[]{dog.getName(),dog.getCode(),dog.getHealth_status(),dog.getBorn_year()});
        
        }
        tablaDog2.setModel(modelo);
        this.dogObjectList = ctlpet.ListPet("Perro");
    
    }
    
    private void tablaCat(){
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new Object[]{"Nombre","Codigo","Estado","Año Nacimiento"});
        for(clsPet cat : catObjectList){
        modelo.addRow(new Object[]{cat.getName(),cat.getCode(),cat.getHealth_status(),cat.getBorn_year()});
        this.catObjectList = ctlpet.ListPet("Gato");
        }
        tablaCat.setModel(modelo);
    }
    
     private void tablaDoctor(){
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new Object[]{"Nombre","Address","Telefono"});
        for(clsBuscarDoctor doctor : docObjectList){
        modelo.addRow(new Object[]{doctor.getNombredoc(),doctor.getAddress(),doctor.getPhone()});
        this.docObjectList = ctldoctor.ListDoctor();
        }
        
        
        TablaDoctor.setModel(modelo);
    }
    
         
    private void FillList(){
        DefaultListModel model = new DefaultListModel();
        int index = 0;
        for (clsPet dog:dogObjectList){
            String perro=dog.getName()+" - "+dog.getHealth_status()+" - "+dog.getCode();
            model.add(index,perro);
            index++;
        }
        
        petListDog.setModel(model);
    }
    
    
    public void clearDogFields(){
        txtPetId.setText("");
        txtDogId.setText("");
        txtCodeDog.setText("");
        txtNameDog.setText("");
        txtBornYearDog.setText("");
        txtColorDog.setText("");
        cbHealthStatusDog.setSelectedIndex(0);
        cbBreedDog.setSelectedIndex(0);
        chbPedigree.setSelected(false);
    }
    
    
    
     private void FillListCat(){
        DefaultListModel model = new DefaultListModel();
        int index = 0;
        for (clsPet cat:catObjectList){
            String gato=cat.getName()+" - "+cat.getHealth_status()+" - "+cat.getCode();
            model.add(index,gato);
            index++;
        }
        petListCat.setModel(model);
    }
     
    /* private void FillListHosp(){
        DefaultListModel model = new DefaultListModel();
        int index = 0;
        for (clsHospital hosp:hospitalObjectList){
            String hospital=hosp.getId_hospital()+" - "+hosp.getNombre()+" - "+hosp.getNumero();
            model.add(index,hosp);
            index++;
        }
        hospitalList.setModel(model);
    }*/
    
    public void clearCatFields(){
        txtPetIdCat.setText("");
        txtCatId.setText("");
        txtCodeCat.setText("");
        txtNameCat.setText("");
        txtBornYearCat.setText("");
        txtColorCat.setText("");
        cbHealthStatusCat.setSelectedIndex(0);
        cbBreedCat.setSelectedIndex(0);
       
    }
    
    public void clearHospFields(){
        txtIdHosp.setText("");
        txtNomHosp.setText("");
        txtNumHosp.setText("");
        
       
    }
    
    
    
    
    public void clearDoctorFields(){
       
        txtNameDoctor.setText("");
        txtNitDoctor.setText("");
        txtAddressDoctor.setText("");
        txtPhoneDoctor.setText("");
        txtNumHab.setText("");
        txtNomSala.setText("");
        txtIdDoctor.setText("");
        txtIDHosp.setText("");
    }
    
    /* private void FillListVeterinary(){
        DefaultListModel model = new DefaultListModel();
        int index = 0;
        for (clsVeterinary veterinary:veterinaryObjectList){
            String veterinary1=veterinary.getName()+" - "+veterinary.getNit()+" - "+veterinary.getAddress()+" - "+veterinary.getPhone();
            model.add(index,veterinary1);
            index++;
        }
        
        ListDoctor.setModel(model);
    }*/
    
    
    
    class FondoPanel extends JPanel{
        private Image imagen;
        
        @Override
        public void paint (Graphics g)
        {
         imagen = new ImageIcon(getClass().getResource("Imagenes/pet.jpg")).getImage();
         
         g.drawImage(imagen, 0, 0, getWidth(),getHeight(), this);
         setOpaque(false);
         super.paint(g);
        }
    }
   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmPet().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaDoctor;
    private javax.swing.JButton btnBuscarCat;
    private javax.swing.JButton btnBuscarDoctor;
    private javax.swing.JButton btnBuscarDog;
    private javax.swing.JButton btnBuscarHosp;
    private javax.swing.JButton btnCrearCat;
    private javax.swing.JButton btnCrearDoctor;
    private javax.swing.JButton btnCrearDog;
    private javax.swing.JButton btnCrearHosp;
    private javax.swing.JButton btnEditarCat;
    private javax.swing.JButton btnEditarDoctor;
    private javax.swing.JButton btnEditarDog;
    private javax.swing.JButton btnEditarHosp;
    private javax.swing.JButton btnEliminarCat;
    private javax.swing.JButton btnEliminarDoctor;
    private javax.swing.JButton btnEliminarDog;
    private javax.swing.JButton btnEliminarHosp;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnExportarCat;
    private javax.swing.JButton btnExportarDoctor;
    private javax.swing.JComboBox cbBreedCat;
    private javax.swing.JComboBox cbBreedDog;
    private javax.swing.JComboBox cbHealthStatusCat;
    private javax.swing.JComboBox cbHealthStatusDog;
    private javax.swing.JCheckBox chbPedigree;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPannel15;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTable jTable1;
    private javax.swing.JTabbedPane jp1;
    private javax.swing.JPanel jpReporteEstadoSalud;
    private javax.swing.JList petListCat;
    private javax.swing.JList petListDog;
    private javax.swing.JTable tablaCat;
    private javax.swing.JTable tablaDog2;
    private javax.swing.JTable tablaHosp2;
    private javax.swing.JTable tablaHospital;
    private javax.swing.JTextField txtAddressDoctor;
    private javax.swing.JTextField txtBornYearCat;
    private javax.swing.JTextField txtBornYearDog;
    private javax.swing.JTextField txtCatId;
    private javax.swing.JTextField txtCodeCat;
    private javax.swing.JTextField txtCodeDog;
    private javax.swing.JTextField txtColorCat;
    private javax.swing.JTextField txtColorDog;
    private javax.swing.JTextField txtDogId;
    private javax.swing.JTextField txtIDHosp;
    private javax.swing.JTextField txtIdDoctor;
    private javax.swing.JTextField txtIdHosp;
    private javax.swing.JTextField txtNameCat;
    private javax.swing.JTextField txtNameDoctor;
    private javax.swing.JTextField txtNameDog;
    private javax.swing.JTextField txtNitDoctor;
    private javax.swing.JTextField txtNomHosp;
    private javax.swing.JTextField txtNomSala;
    private javax.swing.JTextField txtNumHab;
    private javax.swing.JTextField txtNumHosp;
    private javax.swing.JTextField txtPetId;
    private javax.swing.JTextField txtPetIdCat;
    private javax.swing.JTextField txtPhoneDoctor;
    // End of variables declaration//GEN-END:variables
}
